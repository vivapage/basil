{
  "models/trace/insights/CLSCulprits.ts | animation": {
    "message": "Animation"
  },
  "models/trace/insights/CLSCulprits.ts | description": {
    "message": "Layout shifts occur when elements move absent any user interaction. [Investigate the causes of layout shifts](https://web.dev/articles/optimize-cls), such as elements being added, removed, or their fonts changing as the page loads."
  },
  "models/trace/insights/CLSCulprits.ts | fontRequest": {
    "message": "Font request"
  },
  "models/trace/insights/CLSCulprits.ts | injectedIframe": {
    "message": "Injected iframe"
  },
  "models/trace/insights/CLSCulprits.ts | layoutShiftCluster": {
    "message": "Layout shift cluster @ {PH1}"
  },
  "models/trace/insights/CLSCulprits.ts | noCulprits": {
    "message": "Could not detect any layout shift culprits"
  },
  "models/trace/insights/CLSCulprits.ts | noLayoutShifts": {
    "message": "No layout shifts"
  },
  "models/trace/insights/CLSCulprits.ts | title": {
    "message": "Layout shift culprits"
  },
  "models/trace/insights/CLSCulprits.ts | topCulprits": {
    "message": "Top layout shift culprits"
  },
  "models/trace/insights/CLSCulprits.ts | unsizedImages": {
    "message": "Unsized Images"
  },
  "models/trace/insights/CLSCulprits.ts | worstCluster": {
    "message": "Worst cluster"
  },
  "models/trace/insights/CLSCulprits.ts | worstLayoutShiftCluster": {
    "message": "Worst layout shift cluster"
  },
  "models/trace/insights/DocumentLatency.ts | description": {
    "message": "Your first network request is the most important.  Reduce its latency by avoiding redirects, ensuring a fast server response, and enabling text compression."
  },
  "models/trace/insights/DocumentLatency.ts | failedRedirects": {
    "message": "Had redirects"
  },
  "models/trace/insights/DocumentLatency.ts | failedServerResponseTime": {
    "message": "Server responded slowly"
  },
  "models/trace/insights/DocumentLatency.ts | failedTextCompression": {
    "message": "No compression applied"
  },
  "models/trace/insights/DocumentLatency.ts | passingRedirects": {
    "message": "Avoids redirects"
  },
  "models/trace/insights/DocumentLatency.ts | passingServerResponseTime": {
    "message": "Server responds quickly"
  },
  "models/trace/insights/DocumentLatency.ts | passingTextCompression": {
    "message": "Applies text compression"
  },
  "models/trace/insights/DocumentLatency.ts | redirectsLabel": {
    "message": "Redirects"
  },
  "models/trace/insights/DocumentLatency.ts | serverResponseTimeLabel": {
    "message": "Server response time"
  },
  "models/trace/insights/DocumentLatency.ts | title": {
    "message": "Document request latency"
  },
  "models/trace/insights/DocumentLatency.ts | uncompressedDownload": {
    "message": "Uncompressed download"
  },
  "models/trace/insights/DOMSize.ts | description": {
    "message": "A large DOM can increase the duration of style calculations and layout reflows, impacting page responsiveness. A large DOM will also increase memory usage. [Learn how to avoid an excessive DOM size](https://developer.chrome.com/docs/lighthouse/performance/dom-size/)."
  },
  "models/trace/insights/DOMSize.ts | element": {
    "message": "Element"
  },
  "models/trace/insights/DOMSize.ts | maxChildren": {
    "message": "Most children"
  },
  "models/trace/insights/DOMSize.ts | maxDOMDepth": {
    "message": "DOM depth"
  },
  "models/trace/insights/DOMSize.ts | statistic": {
    "message": "Statistic"
  },
  "models/trace/insights/DOMSize.ts | title": {
    "message": "Optimize DOM size"
  },
  "models/trace/insights/DOMSize.ts | totalElements": {
    "message": "Total elements"
  },
  "models/trace/insights/DOMSize.ts | value": {
    "message": "Value"
  },
  "models/trace/insights/FontDisplay.ts | description": {
    "message": "Consider setting [font-display](https://developer.chrome.com/blog/font-display) to swap or optional to ensure text is consistently visible. swap can be further optimized to mitigate layout shifts with [font metric overrides](https://developer.chrome.com/blog/font-fallbacks)."
  },
  "models/trace/insights/FontDisplay.ts | fontColumn": {
    "message": "Font"
  },
  "models/trace/insights/FontDisplay.ts | title": {
    "message": "Font display"
  },
  "models/trace/insights/FontDisplay.ts | wastedTimeColumn": {
    "message": "Wasted time"
  },
  "models/trace/insights/ForcedReflow.ts | description": {
    "message": "Many APIs, typically reading layout geometry, force the rendering engine to pause script execution in order to calculate the style and layout. Learn more about [forced reflow](https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing#avoid-forced-synchronous-layouts) and its mitigations."
  },
  "models/trace/insights/ForcedReflow.ts | relatedStackTrace": {
    "message": "Stack trace"
  },
  "models/trace/insights/ForcedReflow.ts | title": {
    "message": "Forced reflow"
  },
  "models/trace/insights/ForcedReflow.ts | topTimeConsumingFunctionCall": {
    "message": "Top function call"
  },
  "models/trace/insights/ForcedReflow.ts | totalReflowTime": {
    "message": "Total reflow time"
  },
  "models/trace/insights/ImageDelivery.ts | description": {
    "message": "Reducing the download time of images can improve the perceived load time of the page and LCP. [Learn more about optimizing image size](https://developer.chrome.com/docs/lighthouse/performance/uses-optimized-images/)"
  },
  "models/trace/insights/ImageDelivery.ts | noOptimizableImages": {
    "message": "No optimizable images"
  },
  "models/trace/insights/ImageDelivery.ts | optimizeFile": {
    "message": "Optimize file size"
  },
  "models/trace/insights/ImageDelivery.ts | others": {
    "message": "{PH1} others"
  },
  "models/trace/insights/ImageDelivery.ts | title": {
    "message": "Improve image delivery"
  },
  "models/trace/insights/ImageDelivery.ts | useCompression": {
    "message": "Increasing the image compression factor could improve this image's download size. (Est {PH1})"
  },
  "models/trace/insights/ImageDelivery.ts | useModernFormat": {
    "message": "Using a modern image format (WebP, AVIF) or increasing the image compression could improve this image's download size. (Est {PH1})"
  },
  "models/trace/insights/ImageDelivery.ts | useResponsiveSize": {
    "message": "This image file is larger than it needs to be ({PH2}) for its displayed dimensions ({PH3}). Use responsive images to reduce the image download size. (Est {PH1})"
  },
  "models/trace/insights/ImageDelivery.ts | useVideoFormat": {
    "message": "Using video formats instead of GIFs can improve the download size of animated content. (Est {PH1})"
  },
  "models/trace/insights/InteractionToNextPaint.ts | description": {
    "message": "Start investigating with the longest phase. [Delays can be minimized](https://web.dev/articles/optimize-inp#optimize_interactions). To reduce processing duration, [optimize the main-thread costs](https://web.dev/articles/optimize-long-tasks), often JS."
  },
  "models/trace/insights/InteractionToNextPaint.ts | duration": {
    "message": "Duration"
  },
  "models/trace/insights/InteractionToNextPaint.ts | inputDelay": {
    "message": "Input delay"
  },
  "models/trace/insights/InteractionToNextPaint.ts | noInteractions": {
    "message": "No interactions detected"
  },
  "models/trace/insights/InteractionToNextPaint.ts | phase": {
    "message": "Phase"
  },
  "models/trace/insights/InteractionToNextPaint.ts | presentationDelay": {
    "message": "Presentation delay"
  },
  "models/trace/insights/InteractionToNextPaint.ts | processingDuration": {
    "message": "Processing duration"
  },
  "models/trace/insights/InteractionToNextPaint.ts | title": {
    "message": "INP by phase"
  },
  "models/trace/insights/LCPDiscovery.ts | description": {
    "message": "Optimize LCP by making the LCP image [discoverable](https://web.dev/articles/optimize-lcp#1_eliminate_resource_load_delay) from the HTML immediately, and [avoiding lazy-loading](https://web.dev/articles/lcp-lazy-loading)"
  },
  "models/trace/insights/LCPDiscovery.ts | fetchPriorityApplied": {
    "message": "fetchpriority=high applied"
  },
  "models/trace/insights/LCPDiscovery.ts | fetchPriorityShouldBeApplied": {
    "message": "fetchpriority=high should be applied"
  },
  "models/trace/insights/LCPDiscovery.ts | lazyLoadNotApplied": {
    "message": "lazy load not applied"
  },
  "models/trace/insights/LCPDiscovery.ts | lcpLoadDelay": {
    "message": "LCP image loaded {PH1} after earliest start point."
  },
  "models/trace/insights/LCPDiscovery.ts | noLcp": {
    "message": "No LCP detected"
  },
  "models/trace/insights/LCPDiscovery.ts | noLcpResource": {
    "message": "No LCP resource detected because the LCP is not an image"
  },
  "models/trace/insights/LCPDiscovery.ts | requestDiscoverable": {
    "message": "Request is discoverable in initial document"
  },
  "models/trace/insights/LCPDiscovery.ts | title": {
    "message": "LCP request discovery"
  },
  "models/trace/insights/LCPPhases.ts | description": {
    "message": "Each [phase has specific improvement strategies](https://web.dev/articles/optimize-lcp#lcp-breakdown). Ideally, most of the LCP time should be spent on loading the resources, not within delays."
  },
  "models/trace/insights/LCPPhases.ts | elementRenderDelay": {
    "message": "Element render delay"
  },
  "models/trace/insights/LCPPhases.ts | noLcp": {
    "message": "No LCP detected"
  },
  "models/trace/insights/LCPPhases.ts | percentLCP": {
    "message": "% of LCP"
  },
  "models/trace/insights/LCPPhases.ts | phase": {
    "message": "Phase"
  },
  "models/trace/insights/LCPPhases.ts | resourceLoadDelay": {
    "message": "Resource load delay"
  },
  "models/trace/insights/LCPPhases.ts | resourceLoadDuration": {
    "message": "Resource load duration"
  },
  "models/trace/insights/LCPPhases.ts | timeToFirstByte": {
    "message": "Time to first byte"
  },
  "models/trace/insights/LCPPhases.ts | title": {
    "message": "LCP by phase"
  },
  "models/trace/insights/LongCriticalNetworkTree.ts | description": {
    "message": "[Avoid chaining critical requests](https://developer.chrome.com/docs/lighthouse/performance/critical-request-chains) by reducing the length of chains, reducing the download size of resources, or deferring the download of unnecessary resources to improve page load."
  },
  "models/trace/insights/LongCriticalNetworkTree.ts | noLongCriticalNetworkTree": {
    "message": "No rendering tasks impacted by long critical network tree"
  },
  "models/trace/insights/LongCriticalNetworkTree.ts | title": {
    "message": "Long critical network tree"
  },
  "models/trace/insights/RenderBlocking.ts | description": {
    "message": "Requests are blocking the page's initial render, which may delay LCP. [Deferring or inlining](https://web.dev/learn/performance/understanding-the-critical-path#render-blocking_resources/) can move these network requests out of the critical path."
  },
  "models/trace/insights/RenderBlocking.ts | duration": {
    "message": "Duration"
  },
  "models/trace/insights/RenderBlocking.ts | noRenderBlocking": {
    "message": "No render blocking requests for this navigation"
  },
  "models/trace/insights/RenderBlocking.ts | renderBlockingRequest": {
    "message": "Request"
  },
  "models/trace/insights/RenderBlocking.ts | title": {
    "message": "Render blocking requests"
  },
  "models/trace/insights/SlowCSSSelector.ts | description": {
    "message": "If Recalculate Style costs remain high, selector optimization can reduce them. [Optimize the selectors](https://developer.chrome.com/docs/devtools/performance/selector-stats) with both high elapsed time and high slow-path %. Simpler selectors, fewer selectors, a smaller DOM, and a shallower DOM will all reduce matching costs."
  },
  "models/trace/insights/SlowCSSSelector.ts | elapsed": {
    "message": "Elapsed time"
  },
  "models/trace/insights/SlowCSSSelector.ts | enableSelectorData": {
    "message": "No CSS selector data was found. CSS selector stats need to be enabled in the performance panel settings."
  },
  "models/trace/insights/SlowCSSSelector.ts | matchAttempts": {
    "message": "Match attempts"
  },
  "models/trace/insights/SlowCSSSelector.ts | matchCount": {
    "message": "Match count"
  },
  "models/trace/insights/SlowCSSSelector.ts | title": {
    "message": "CSS Selector costs"
  },
  "models/trace/insights/SlowCSSSelector.ts | topSelectors": {
    "message": "Top selectors"
  },
  "models/trace/insights/SlowCSSSelector.ts | total": {
    "message": "Total"
  },
  "models/trace/insights/ThirdParties.ts | columnMainThreadTime": {
    "message": "Main thread time"
  },
  "models/trace/insights/ThirdParties.ts | columnThirdParty": {
    "message": "Third party"
  },
  "models/trace/insights/ThirdParties.ts | columnTransferSize": {
    "message": "Transfer size"
  },
  "models/trace/insights/ThirdParties.ts | description": {
    "message": "Third party code can significantly impact load performance. [Reduce and defer loading of third party code](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/loading-third-party-javascript/) to prioritize your page's content."
  },
  "models/trace/insights/ThirdParties.ts | noThirdParties": {
    "message": "No third parties found"
  },
  "models/trace/insights/ThirdParties.ts | title": {
    "message": "Third parties"
  },
  "models/trace/insights/Viewport.ts | description": {
    "message": "Tap interactions may be [delayed by up to 300\u00a0ms](https://developer.chrome.com/blog/300ms-tap-delay-gone-away/) if the viewport is not optimized for mobile."
  },
  "models/trace/insights/Viewport.ts | title": {
    "message": "Optimize viewport for mobile"
  }
}